// Place your key bindings in this file to override the defaults
[
    // Place your key bindings in this file to override the defaults
    //   how to open this file (keybindings.jaon) , settings
    {
      "key": "ctrl+k ctrl+l",
      "command": "workbench.action.openGlobalKeybindingsFile"
    },
    {
      "key": "ctrl+o ctrl+p",
      "command": "workbench.action.openApplicationSettingsJson"
    },
    // THIS IS REALLY USEFUL for webDev lol
    {
      "key": "ctrl+n",
      "command": "extension.advancedNewFile"
    },
    {
      "key": "ctrl+shift+f ctrl+shift+f",
      "command": "fileutils.newFolder"
    },
    //   FOLDING KEYBINDINGS
    {
      "key": "ctrl+k ctrl+-",
      "command": "editor.unfoldAll",
      "when": "editorTextFocus && foldingEnabled"
    },
    {
      "key": "ctrl+k ctrl+j",
      "command": "-editor.unfoldAll",
      "when": "editorTextFocus && foldingEnabled"
    },
    {
      "key": "shift+alt+[",
      "command": "editor.fold",
      "when": "editorTextFocus && foldingEnabled"
    },
    {
      "key": "ctrl+shift+[",
      "command": "-editor.fold",
      "when": "editorTextFocus && foldingEnabled"
    },
    {
      "key": "shift+alt+]",
      "command": "editor.unfold",
      "when": "editorTextFocus && foldingEnabled"
    },
    {
      "key": "ctrl+shift+]",
      "command": "-editor.unfold",
      "when": "editorTextFocus && foldingEnabled"
    },
  
  
  
  //   changing tabs easily --------------------------------------------------------------------------------------------------
    // sought of redundant since H / L are for changing tabs now
    {
      "key": "ctrl+tab",
      "command": "workbench.action.nextEditor"
    },
    {
      "key": "ctrl+shift+tab",
      "command": "workbench.action.previousEditor"
    },
  
      // Zoom in and out 
    {
      "key": "ctrl+shift+alt+j",
      "command": "editor.action.fontZoomIn"
    },
    {
      "key": "ctrl+shift+alt+k",
      "command": "editor.action.fontZoomOut"
    },
  
 
    // asign ctrl + 1, ctrl + 2 to first tab and last tab
    {
      "key": "ctrl+1",
      "command": "workbench.action.openEditorAtIndex1"
    },
  
    // ------------------------------------------------------------------------------------------------
  
  
  
  // transform upper_Case, lower_Case, snake_case, title_case
  {
      "key": "ctrl+shift+alt+u ctrl+shift+alt+u",
      "command": "editor.action.transformToUppercase"
  },
  {
      "key": "ctrl+shift+alt+l ctrl+shift+alt+l",
      "command": "editor.action.transformToLowercase"
  },
  {
      "key": "ctrl+shift+alt+s ctrl+shift+alt+s",
      "command": "editor.action.transformToSnakecase"
  },
  {
      "key": "ctrl+shift+alt+t ctrl+shift+alt+t",
      "command": "editor.action.transformToTitlecase"
  },
  {
    "key": "shift+alt+m shift+alt+m",
    "command": "editor.action.transformToCamelcase"
  },
  
    // toggling visibility of  status_bar, minimap , activity_bar
    {
      "key": "ctrl+shift+z",
      "command": "workbench.action.toggleStatusbarVisibility"
    },
    {
      "key": "ctrl+shift+oem_2",
      "command": "editor.action.toggleMinimap"
    },
    {
      "key": "ctrl+shift+' ctrl+shift+/",
      "command": "workbench.action.toggleActivityBarVisibility"
    },
  
  
  
  //  ----------------------------------------------------------------------------------------------------------
  
  //   -------- EXTENSION KEYBINDINGS ----------
  {
    "key": "ctrl+shift+alt+m",
    "command": "glassit.increase"
  },
  {
    "key": "ctrl+shift+alt+n",
    "command": "glassit.decrease"
  },
  
  {
    "key": "shift+alt+l shift+alt+l",
    "command": "errorLens.toggle"
  },
  
  
  // ----------------- VIM -----------------------
  
  // while in vim, to enable indentation using tabs and shift tabs
  
  {
    "key": "tab",
    "command": "tab",
    "when": "editorTextFocus && !editorTabMovesFocus"
  },
  {
    "key": "shift+tab",
    "command": "outdent",
    "when": "editorTextFocus && !editorTabMovesFocus"
  },
  
    // Traverse VSCode IntelliSense suggestions with vim keybindings.
  {
    "key": "ctrl+j",
    "command": "selectNextSuggestion",
    "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus"
  },
  {
    "key": "ctrl+k",
    "command": "selectPrevSuggestion",
    "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus"
  },
  // QuickOpenNavigation is the one you see with Ctrl+p
  {
      "key": "ctrl+j",
      "command": "workbench.action.quickOpenSelectNext",
      "when": "inQuickOpen"
  },
  {
      "key": "ctrl+k",
      "command": "workbench.action.quickOpenSelectPrevious",
      "when": "inQuickOpen"
  },
  // ctrl +shift + p is quickOpen
  {
      "key": "ctrl+j",
      "command": "workbench.action.quickOpenNavigateNext",
      "when": "inQuickOpen"
  },
  {
      "key": "ctrl+k",
      "command": "workbench.action.quickOpenNavigatePrevious",
      "when": "inQuickOpen"
  },
  
  /*
          a - New file
          f - New folder
          r - Rename item
          x - Cut item
          y - Copy item
          p - Paste item
  */
  {
      "key": "a",
      "command": "explorer.newFile",
      "when": "explorerViewletVisible && filesExplorerFocus && !explorerResourceIsRoot && !explorerResourceReadonly && !inputFocus"
  },
  {
      "key": "f",
      "command": "explorer.newFolder",
      "when": "explorerViewletVisible && filesExplorerFocus && !explorerResourceIsRoot && !explorerResourceReadonly && !inputFocus"
  },
  {
      "key": "r",
      "command": "renameFile",
      "when": "explorerViewletVisible && filesExplorerFocus && !explorerResourceIsRoot && !explorerResourceReadonly && !inputFocus"
  },
  {
      "key": "x",
      "command": "filesExplorer.cut",
      "when": "explorerViewletVisible && filesExplorerFocus && !explorerResourceIsRoot && !explorerResourceReadonly && !inputFocus"
  },
  {
      "key": "y",
      "command": "filesExplorer.copy",
      "when": "explorerViewletVisible && filesExplorerFocus && !explorerResourceIsRoot && !inputFocus"
  },
  {
      "key": "p",
      "command": "filesExplorer.paste",
      "when": "explorerViewletVisible && filesExplorerFocus && !explorerResourceReadonly && !inputFocus"
  },
  
  
  
  
  {
    "key": "h",
    "command": "editor.action.scrollLeftHover",
    "when": "editorHoverFocused"
  },
  {
    "key": "j",
    "command": "editor.action.scrollDownHover",
    "when": "editorHoverFocused"
  },
  {
    "key": "k",
    "command": "editor.action.scrollUpHover",
    "when": "editorHoverFocused"
  },
  {
    "key": "l",
    "command": "editor.action.scrollRightHover",
    "when": "editorHoverFocused"
  },
  
  
  
  {
    "key": "ctrl+alt+z",
    "command": "toggleVim"
  },
  
  
  
  
  //  ----------------------------------------------------------------------------------------------------------
  
  // Important Editing   
  
  // Only these are needed in order to have 
  // Add Cursor up/down + Copy Line up/down in VimBindings
  
        // Find all occurances of somthing in entire workspace ; Include, Exclde files with regex
        {
            "key": "shift+alt+f shift+alt+f",
            "command": "workbench.action.findInFiles"
        },

        {
            "key": "ctrl+alt+j",
            "command": "editor.action.moveLinesDownAction",
            "when": "editorTextFocus && !editorReadonly"
        },
        {
            "key": "ctrl+alt+k",
            "command": "editor.action.moveLinesUpAction",
            "when": "editorTextFocus && !editorReadonly"
        },
        {
            "key": "shift+alt+k",
            "command": "editor.action.copyLinesUpAction",
            "when": "editorTextFocus && !editorReadonly"
        },
        {
            "key": "shift+alt+j",
            "command": "editor.action.copyLinesDownAction",
            "when": "editorTextFocus && !editorReadonly"
        },
        
        {
            "key": "ctrl+shift+j",
            "command": "editor.action.insertCursorBelow",
            "when": "editorTextFocus"
        },
        {
            "key": "ctrl+shift+k",
            "command": "editor.action.insertCursorAbove",
            "when": "editorTextFocus"
        },
        
  
        // Miscellaneous
        
        // Jupyter notebook => Add new cell below 
        {
            "key": "shift+alt+j shift+alt+j",
            "command": "jupyter.notebookeditor.addcellbelow"
        },

        // Jupyter notebook => Delete cell ; Stop using Jupitor notebooks for coding ( Use it for only DOCUMENTATION )
        {
            "key": "ctrl+shift+; ctrl+x",
            "command": "jupyter.deleteCells",
            "when": "editorTextFocus && jupyter.hascodecells && !jupyter.webExtension && !notebookEditorFocused"
        },

// Very useful NAVIGATION ( Navigate BACK, Navigate FRONT )
                {
                    "key": "shift+alt+oem_minus",
                    "command": "workbench.action.navigateBack",
                    "when": "canNavigateBack"
                },
                {
                    "key": "shift+alt+oem_plus",
                    "command": "workbench.action.navigateForward",
                    "when": "canNavigateForward"
                },



        // Split EDitor ; Split Editor in Groups -------------------------------------------------------------------------------------------

        // This does not CHANGE THE LAYOUT ( more useful than SPLIT, =>  SPLIT IN GROUP )
        // ctrl + shift + \ => to `split in group` AND `join back` ( Wroks like toggle )

        // These are in SAME GROUP
        {
            "key": "ctrl+shift+oem_5 ctrl+shift+oem_5",
            "command": "workbench.action.splitEditorInGroup",
            "when": "activeEditorCanSplitInGroup"
        },
        {
            "key": "ctrl+shift+oem_5 ctrl+shift+oem_5",
            "command": "workbench.action.joinEditorInGroup",
            "when": "sideBySideEditorActive"
        },
        
        // alt + \ -> split down ; ctrl + \ -> split up => THIS OPENS A NEW GROUP

        // IMPORTANT TRICK => SOOOOO FUCKING COOL => USE ctrl + k ctrk + m TO FOCUS ON JUST ONE TAB 
        // 1. SPLIT IN NEW GROUP ( ctlr + \ or alt + \ )
        // 2. Ctrl + K Ctrl + M

        // Generally, one 2 editor groups will be there, you can easy navigate by using H and L ( same as next and prevoius tab )

        {
            "key": "alt+oem_5",
            "command": "workbench.action.splitEditorDown"
        },


        // open this file in NEW GROUP 
        // to JOIN in it back to group 1 => ahift + alt + 1
        // to JOIN in it back to group 2 => ahift + alt + 2
        {
            "key": "ctrl+2 ctrl+2",
            "command": "workbench.action.moveEditorToNextGroup"
        }


]